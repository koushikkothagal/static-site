'use strict'

function assert(v, message) {
  if (!v) {
    throw Error(message)
  }
}

/* Checks if text ends with suffix.
   By default is case insensitive
*/
var ends_with = exports.ends_with =
function ends_with (text, suffix, case_sensitive) {
  if (text.length < suffix.length) {
    return false
  }
  var cmp_suffix = text.substring(text.length - suffix.length)
  if (!case_sensitive) {
    suffix = suffix.toLowerCase()
    cmp_suffix = cmp_suffix.toLowerCase()
  }
  return suffix == cmp_suffix
}


/*
  "Cut path (its relative part) as a postfix and returns what is rest from prefix.
   Examples:
       http://example.com -> http://example.com/
       file:// -> file:///
       file:///ololo/ -> file:///
       http://example.com/fol/der -> http://example.com/
       //fol/der -> //
       /fol/der -> /
       fol/der -> \"\"
  "
*/
var domain = exports.domain =
function domain(url) {
  if (url.match(/^\w*:\/\/[^\/]*$/)) {
    return url + "/"
  }
  var match = url.match(/^(\w*:\/\/[^\/]*\/|\/\/|\/).*/)
  return match && match[1] || ""
}


/*
  "Returns path in relative form.
   Examples:
       http://example.com -> ""
       file:// -> ""
       file:///ololo/ -> ololo/
       http://example.com/fol/der -> fol/der
       //fol/der -> fol/der
       /fol/der -> fol/der
       fol/der -> fol/der
  "
*/
var path = exports.path =
function path(url) {
  var d = domain(url)
  if (d == url + "/") {
    return ""
  }
  return url.substring(d.length)
            .match(/^\/*(.*)$/)[1]
            .replace(/\/+/g, '/')
}


/*
  "Returns `true` if path is relative"
 */
var is_relative = exports.is_relative =
function is_relative (url) {
  return "" == domain(url)
}


/*
  "Converts relative path to absolute relatively to base path"
 */
var absolute = exports.absolute =
function absolute (base, relative) {
    // http://stackoverflow.com/a/14780463/1549127
    assert(is_relative(relative), relative + ' supposed to be relative')

    var stack = path(base).split('/')
    var parts = relative.split('/')
    stack.pop(); // remove current file name (or empty string)
                 // (omit if "base" is the current folder without trailing slash)
    for (var i=0; i<parts.length; i++) {
        if (parts[i] == '.')
            continue;
        if (parts[i] == '..')
            stack.pop()
        else
            stack.push(parts[i])
    }
    return domain(base) + stack.join('/')
}




  /**
   * Returns the same url if its relative url or url with protocol and domain:
   *   * some/relative/path.html
   *   * ../../anothre/relative.html
   *   * http://example.com/path/
   *   * anyprotocol://example.com/path
   *
   * If it's an absolute path without protocol it adds the prefix
   *   * /some/absolute/path -> <prefix>/some/absolute/path
   *
   * If there is an optional param `path` passed
   * then relative urls become converted to absolute.
   */
var prefixize = exports.prefixize =
function prefixize () {
  if (arguments.length <= 2) {
    return prefixize(arguments[0], null, arguments[1])
  }
  var prefix = arguments[0]
  var path = arguments[1]
  var url = arguments[2]
  switch(domain(url)) {
    case "/": return prefix + url
    case  "": return !path ? url : prefix + absolute(path, url)
    default: return url
  }
}




